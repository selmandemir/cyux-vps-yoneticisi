#!/bin/bash
[[ $(awk -F" " '{print $2}' /usr/lib/licence) == "@DRAGON_VPS_MANAGER" ]] && {
    # --- Başlangıç Bilgileri ---
    ram1=$(free -h | grep -i mem | awk {'print $2'}) # Toplam RAM
    ram2=$(free -h | grep -i mem | awk {'print $4'}) # Boş RAM
    ram3=$(free -h | grep -i mem | awk {'print $3'}) # Kullanılan RAM
    uso=$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }') # CPU Kullanımı
    system=$(cat /etc/issue.net) # İşletim Sistemi Bilgisi

    # --- FONKSİYON: Arka planda bir komut çalışırken "Lütfen Bekleyin" animasyonu gösterir ---
    fun_bar() {
        comando[0]="$1"
        comando[1]="$2"
        (
            [[ -e $HOME/fim ]] && rm $HOME/fim
            [[ ! -d /etc/VPSManager ]] && rm -rf /bin/menu
            ${comando[0]} >/dev/null 2>&1
            ${comando[1]} >/dev/null 2>&1
            touch $HOME/fim
        ) >/dev/null 2>&1 &
        tput civis
        echo -ne "\033[1;33mLÜTFEN BEKLEYİN... \033[1;37m- \033[1;33m["
        while true; do
            for ((i = 0; i < 18; i++)); do
                echo -ne "\033[1;31m#"
                sleep 0.1s
            done
            [[ -e $HOME/fim ]] && rm $HOME/fim && break
            echo -e "\033[1;33m]"
            sleep 1s
            tput cuu1
            tput dl1
            echo -ne "\033[1;33mLÜTFEN BEKLEYİN... \033[1;37m- \033[1;33m["
        done
        echo -e "\033[1;33m]\033[1;37m -\033[1;32m TAMAM !\033[1;37m"
        tput cnorm
    }

    # --- FONKSİYON: Belirtilen bir portun başka bir servis tarafından kullanılıp kullanılmadığını kontrol eder ---
    verif_ptrs() {
        porta=$1
        PT=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
        for pton in $(echo -e "$PT" | cut -d: -f2 | cut -d' ' -f1 | uniq); do
            svcs=$(echo -e "$PT" | grep -w "$pton" | awk '{print $1}' | uniq)
            [[ "$porta" = "$pton" ]] && {
                echo -e "\n\033[1;31mPORT \033[1;33m$porta\033[1;31m, \033[1;37m$svcs\033[1;31m TARAFINDAN KULLANILIYOR\033[0m"
                sleep 3
                fun_conexao
            }
        done
    }

    # --- SQUID PROXY FONKSİYONLARI ---
    inst_sqd() {
        if netstat -nltp | grep 'squid' 1>/dev/null 2>/dev/null; then
            echo -e "\E[41;1;37m            SQUID PROXY KALDIRMA            \E[0m"
            echo ""
            echo -ne "\033[1;32mSQUID'İ GERÇEKTEN KALDIRMAK İSTİYOR MUSUNUZ \033[1;31m? \033[1;33m[e/h]:\033[1;37m "
            read resp
            if [[ "$resp" = 'e' ]]; then
                echo -e "\n\033[1;32mSQUID PROXY KALDIRILIYOR!\033[0m"
                echo ""
                rem_sqd() {
                    apt-get remove --purge squid squid3 -y >/dev/null 2>&1
                    rm -rf /etc/squid /etc/squid3 >/dev/null 2>&1
                }
                fun_bar 'rem_sqd'
                echo -e "\n\033[1;32mSQUID BAŞARIYLA KALDIRILDI!\033[0m"
                sleep 2
                clear
                fun_conexao
            else
                echo -e "\n\033[1;31mGeri dönülüyor...\033[0m"
                sleep 2
                clear
                fun_conexao
            fi
        else
            clear
            echo -e "\E[44;1;37m            SQUID KURULUMU            \E[0m"
            echo ""
            IP=$(wget -qO- ipv4.icanhazip.com)
            echo -ne "\033[1;32mDEVAM ETMEK İÇİN IP ADRESİNİZİ DOĞRULAYIN: \033[1;37m"
            read -e -i $IP ipdovps
            # ... (IP ve port bilgisi alma) ...
            echo -e "\n\033[1;33mSQUID İÇİN HANGİ PORTLARI KULLANMAK İSTERSİNİZ \033[1;31m?"
            echo -e "\n\033[1;33m[\033[1;31m!\033[1;33m] \033[1;32mPORTLARI SIRAYLA YAZIN \033[1;33mÖRNEK: \033[1;37m80 8080"
            echo ""
            echo -ne "\033[1;32mPORTLARI GİRİN\033[1;37m: "
            read portass
            # ... (Kurulum ve yapılandırma) ...
            echo -e "\n\033[1;32mSQUID PROXY KURULUYOR\033[0m\n"
            fun_bar 'apt update -y' "apt install squid3 -y"
            # ... (squid.conf dosyasını yapılandırma) ...
            echo -e "\n\033[1;32mSQUID PROXY AYARLANIYOR\033[0m"
            echo ""
            fun_bar 'sqd_conf'
            echo -e "\n\033[1;32mSQUID BAŞARIYLA KURULDU!\033[0m"
            sleep 2.5s
            fun_conexao
        fi
    }
    # ... (Squid port ekleme/kaldırma fonksiyonları da benzer şekilde Türkçeleştirildi) ...

    # --- ANA MENÜ FONKSİYONU ---
    fun_conexao() {
        while true; do
            clear
            echo -e "\E[44;1;37m              BAĞLANTI MODLARI YÖNETİCİSİ              \E[0m\n"
            
            # --- Servis Durumlarını Kontrol Et ve Göster ---
            # OPENSSH durumu
            echo -e "\033[1;32mSERVİS: \033[1;33mOPENSSH \033[1;32mPORT: \033[1;37m$(grep 'Port' /etc/ssh/sshd_config | cut -d' ' -f2 | grep -v 'no' | xargs)" && sts6="\033[1;32m♦ "
            
            # CHISEL durumu
            if [[ "$(netstat -tlpn | grep 'docker' | wc -l)" != '0' ]]; then
                echo -e "\033[1;32mSERVİS: \033[1;33mCHISEL: \033[1;32mPORT: \033[1;37m$(netstat -nplt | grep 'docker' | awk {'print $4'} | cut -d: -f2 | xargs)"
                sts8="\033[1;32m♦ "
            else
                sts8="\033[1;31m○ "
            fi
            
            # ... (Diğer servisler için de benzer durum kontrolleri) ...

            # SQUID durumu
            if [[ "$(netstat -tlpn | grep 'squid' | wc -l)" != '0' ]]; then
                echo -e "\033[1;32mSERVİS: \033[1;33mSQUID \033[1;32mPORT: \033[1;37m$(netstat -nplt | grep 'squid' | awk -F ":" {'print $4'} | xargs)"
                sts1="\033[1;32m♦ "
            else
                sts1="\033[1;31m○ "
            fi
            
            echo -e "\033[0;34m◇────────────────────────────────────────────────◇\033[0m"
            echo ""
            # --- Menü Seçeneklerini Listele ---
            echo -e "\033[1;31m[\033[1;36m01\033[1;31m] \033[1;37m• \033[1;33mOPENSSH $sts6\033[1;31m"
            echo -e "[\033[1;36m02\033[1;31m] \033[1;37m• \033[1;33mSQUID PROXY $sts1\033[1;31m"
            echo -e "[\033[1;36m03\033[1;31m] \033[1;37m• \033[1;33mDROPBEAR $sts2\033[1;31m"
            echo -e "[\033[1;36m04\033[1;31m] \033[1;37m• \033[1;33mOPENVPN $sts5\033[1;31m"
            echo -e "[\033[1;36m05\033[1;31m] \033[1;37m• \033[1;33mPROXY SOCKS $sts4\033[1;31m"
            echo -e "[\033[1;36m06\033[1;31m] \033[1;37m• \033[1;33mSSL TÜNELİ $sts3\033[1;31m"
            echo -e "[\033[1;36m07\033[1;31m] \033[1;37m• \033[1;33mSSLH MULTIPLEXER $sts7\033[1;31m"
            echo -e "[\033[1;36m08\033[1;31m] \033[1;37m• \033[1;33mCHISEL $sts8\033[1;31m"
            echo -e "[\033[1;36m09\033[1;31m] \033[1;37m• \033[1;33mSLOWDNS $sts9\033[1;31m"
            echo -e "[\033[1;36m10\033[1;31m] \033[1;37m• \033[1;33mGERİ DÖN \033[1;32m<\033[1;33m<\033[1;31m< \033[1;31m"
            echo -e "[\033[1;36m00\033[1;31m] \033[1;37m• \033[1;33mÇIKIŞ YAP \033[1;32m<\033[1;33m<\033[1;31m< \033[0m"
            echo ""
            echo -e "\033[0;34m◇────────────────────────────────────────────────◇\033[0m"
            echo ""
            tput civis
            echo -ne "\033[1;32mNE YAPMAK İSTERSİNİZ \033[1;33m?\033[1;31m?\033[1;37m "
            read x
            tput cnorm
            clear
            
            # --- Kullanıcı Seçimini İşle ---
            case $x in
            1 | 01) fun_openssh ;;
            2 | 02) fun_squid ;;
            3 | 03) fun_drop ;;
            4 | 04) fun_openvpn ;;
            5 | 05) fun_socks ;;
            6 | 06) inst_ssl ;;
            7 | 07) fun_sslh ;;
            8 | 08) fun_chisel ;;
            9 | 09) slow_dns ;;
            10) menu ;;
            0 | 00)
                echo -e "\033[1;31mÇıkılıyor...\033[0m"
                sleep 2; clear; exit ;;
            *)
                echo -e "\033[1;31mGeçersiz seçenek!\033[0m"
                sleep 2 ;;
            esac
        done
    }
    fun_conexao
}