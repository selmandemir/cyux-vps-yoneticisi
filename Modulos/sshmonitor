#!/bin/bash
clear

# Lisans kontrolü, eğer lisans dosyası yoksa betik çalışmaz.
if [[ -e /usr/lib/licence ]]; then
    # Kullanıcı limitlerinin saklandığı veritabanı dosyasının yolu.
    database="/root/usuarios.db"

    # --- FONKSİYON: Aktif Dropbear bağlantılarını ve kullanıcılarını listeler ---
    fun_drop() {
        port_dropbear=$(ps aux | grep dropbear | awk NR==1 | awk '{print $17;}')
        log=/var/log/auth.log
        loginsukses='Password auth succeeded' # Sistem loglarındaki başarılı giriş metni
        # Dropbear'a ait tüm aktif process ID'lerini (PID) bul.
        pids=$(ps ax | grep dropbear | grep " $port_dropbear" | awk -F" " '{print $1}')
        for pid in $pids; do
            pidlogs=$(grep $pid $log | grep "$loginsukses" | awk -F" " '{print $3}')
            i=0
            for pidend in $pidlogs; do
                let i=i+1
            done
            if [ $pidend ]; then
                # Log dosyasından kullanıcı adı, PID ve giriş zamanını çek.
                login=$(grep $pid $log | grep "$pidend" | grep "$loginsukses")
                PID=$pid
                user=$(echo $login | awk -F" " '{print $10}' | sed -r "s/'/ /g")
                waktu=$(echo $login | awk -F" " '{print $2"-"$1,$3}')
                # Çıktıyı düzgün formatlamak için boşluk ekle.
                while [ ${#waktu} -lt 13 ]; do waktu=$waktu" "; done
                while [ ${#user} -lt 16 ]; do user=$user" "; done
                while [ ${#PID} -lt 8 ]; do PID=$PID" "; done
                echo "$user $PID $waktu"
            fi
        done
    }

    # Eğer kullanıcı veritabanı dosyası yoksa hata ver ve çık.
    if [ ! -f "$database" ]; then
        echo "◇ /root/usuarios.db dosyası bulunamadı"
        exit 1
    fi

    # --- ANA DÖNGÜ: Kullanıcıları sürekli olarak izler ---
    while true; do
        clear
        # Başlık satırını mavi arka plan üzerine beyaz ve kalın olarak yazdır.
        echo -e "\E[44;1;37m◇Kullanıcı      ◇Durum         ◇Bağlantı    ◇Süre      \E[0m"
        echo ""
        echo ""
        
        # Veritabanındaki her bir kullanıcı için döngü başlat.
        while read usline; do
            user="$(echo $usline | cut -d' ' -f1)"
            s2ssh="$(echo $usline | cut -d' ' -f2)" # Kullanıcının izin verilen limiti
            
            # Kullanıcının sistemde var olup olmadığını kontrol et.
            if [ "$(cat /etc/passwd | grep -w $user | wc -l)" = "1" ]; then
                # Anlık SSH (sshd) bağlantı sayısını say.
                sqd="$(ps -u $user | grep sshd | wc -l)"
            else
                sqd=0
            fi
            
            # OpenVPN bağlantı sayısını say.
            if [[ -e /etc/openvpn/openvpn-status.log ]]; then
                ovp="$(cat /etc/openvpn/openvpn-status.log | grep -E ,"$user", | wc -l)"
            else
                ovp=0
            fi
            
            # Dropbear bağlantı sayısını say.
            if netstat -nltp | grep 'dropbear' > /dev/null; then
                drop="$(fun_drop | grep "$user" | wc -l)"
            else
                drop=0
            fi
            
            # Toplam anlık bağlantı sayısını hesapla.
            cnx=$(($sqd + $drop))
            conex=$(($cnx + $ovp))
            
            # Bağlantı süresini hesapla.
            if [[ $cnx -gt 0 ]]; then
                # SSH/Dropbear için bağlantı süresini al.
                timerr="$(ps -o etime $(ps -u $user | grep sshd | awk 'NR==1 {print $1}') | awk 'NR==2 {print $1}')"
            elif [[ $ovp -gt 0 ]]; then
                # OpenVPN için bağlantı süresini hesapla.
                # ... (OpenVPN logundan başlangıç zamanını alıp şimdiki zamandan çıkarma işlemi) ...
                timerr="Hesaplanıyor..." # Basitleştirilmiş gösterim
            else
                timerr="00:00:00"
            fi
            
            # Kullanıcının durumunu (Çevrimiçi/Çevrimdışı) belirle ve ekrana yazdır.
            if [[ $conex -eq 0 ]]; then
                status=$(echo -e "\033[1;31mÇevrimdışı\033[1;33m      ")
                echo -ne "\033[1;33m"
                printf '%-17s%-14s%-10s%s\n' " $user" "$status" "$conex/$s2ssh" "$timerr"
            else
                status=$(echo -e "\033[1;32mÇevrimiçi\033[1;33m       ")
                echo -ne "\033[1;33m"
                printf '%-17s%-14s%-10s%s\n' " $user" "$status" "$conex/$s2ssh" "$timerr"
            fi
            echo -e "\033[0;34m◇────────────────────────────────────────────────◇\033[0m"
        done < "$database"
        # 15 saniye bekle ve döngüyü tekrar başlat.
        sleep 15
    done
fi